
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lang.parser;

import java_cup.runtime.*;
import lang.ast.*;
import lang.ast.command.*;
import lang.ast.expr.*;
import lang.ast.types.*;
import lang.ast.decl.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.lang.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LangParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public LangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\006\004\000\002\006\002" +
    "\000\002\003\007\000\002\005\010\000\002\021\004\000" +
    "\002\021\002\000\002\010\004\000\002\010\002\000\002" +
    "\007\006\000\002\022\005\000\002\022\003\000\002\011" +
    "\005\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\015\002\000\002\016\007\000\002\016" +
    "\011\000\002\016\007\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\006\000\002\016\010\000" +
    "\002\025\005\000\002\025\002\000\002\024\005\000\002" +
    "\024\003\000\002\023\003\000\002\023\006\000\002\023" +
    "\005\000\002\017\003\000\002\017\002\000\002\020\007" +
    "\000\002\020\005\000\002\026\005\000\002\026\003\000" +
    "\002\027\005\000\002\027\003\000\002\030\005\000\002" +
    "\030\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\003\000\002" +
    "\035\004\000\002\035\004\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\036\005\000" +
    "\002\036\011\000\002\036\003\000\002\036\005\000\002" +
    "\031\005\000\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\ufffe\042\ufffe\044\ufffe\001\002\000" +
    "\010\002\ufffc\042\ufffc\044\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\004\043\222\001" +
    "\002\000\006\002\001\042\012\001\002\000\010\002\uffff" +
    "\042\uffff\044\uffff\001\002\000\004\006\014\001\002\000" +
    "\006\002\ufffd\042\ufffd\001\002\000\006\007\uffd6\042\015" +
    "\001\002\000\004\015\220\001\002\000\004\007\034\001" +
    "\002\000\006\007\uffd7\012\020\001\002\000\004\042\021" +
    "\001\002\000\004\015\022\001\002\000\014\043\026\045" +
    "\024\046\030\047\027\050\023\001\002\000\042\004\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\001\002\000\042\004\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\001\002\000\010\007\uffd5\010\032\012\uffd5\001\002" +
    "\000\042\004\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\001\002\000\042\004" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\001\002\000\042\004\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\001\002\000\042\004\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\001" +
    "\002\000\004\011\033\001\002\000\042\004\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\001\002\000\006\004\ufff8\014\036\001\002\000" +
    "\004\004\043\001\002\000\014\043\026\045\024\046\030" +
    "\047\027\050\023\001\002\000\010\004\ufff3\010\032\012" +
    "\ufff3\001\002\000\006\004\ufff9\012\041\001\002\000\014" +
    "\043\026\045\024\046\030\047\027\050\023\001\002\000" +
    "\010\004\ufff4\010\032\012\ufff4\001\002\000\020\005\uffe7" +
    "\042\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\006\002\ufffa\042\ufffa\001\002\000\020\005\055" +
    "\042\051\051\050\053\054\054\046\055\053\056\052\001" +
    "\002\000\004\042\202\001\002\000\020\005\uffe8\042\uffe8" +
    "\051\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000" +
    "\004\006\210\001\002\000\012\006\174\010\uffda\016\uffda" +
    "\017\uffda\001\002\000\030\006\063\020\100\022\072\033" +
    "\065\034\073\035\102\036\076\037\070\040\077\041\103" +
    "\042\071\001\002\000\030\006\063\020\100\022\072\033" +
    "\065\034\073\035\102\036\076\037\070\040\077\041\103" +
    "\042\071\001\002\000\004\006\156\001\002\000\024\002" +
    "\uffeb\005\uffeb\042\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\001\002\000\010\010\060\016\061\017" +
    "\057\001\002\000\030\006\063\020\100\022\072\033\065" +
    "\034\073\035\102\036\076\037\070\040\077\041\103\042" +
    "\071\001\002\000\030\006\063\020\100\022\072\033\065" +
    "\034\073\035\102\036\076\037\070\040\077\041\103\042" +
    "\071\001\002\000\004\042\062\001\002\000\044\007\uffd8" +
    "\010\uffd8\011\uffd8\012\uffd8\013\uffd8\016\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\001\002\000\030\006\063\020" +
    "\100\022\072\033\065\034\073\035\102\036\076\037\070" +
    "\040\077\041\103\042\071\001\002\000\036\007\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\001" +
    "\002\000\030\006\063\020\100\022\072\033\065\034\073" +
    "\035\102\036\076\037\070\040\077\041\103\042\071\001" +
    "\002\000\020\007\uffce\011\uffce\012\uffce\013\uffce\026\145" +
    "\027\146\032\uffce\001\002\000\006\011\144\032\127\001" +
    "\002\000\036\007\uffbf\011\uffbf\012\uffbf\013\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\001\002\000\044\006\133\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\016\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\001\002\000\030\006\063\020\100\022" +
    "\072\033\065\034\073\035\102\036\076\037\070\040\077" +
    "\041\103\042\071\001\002\000\036\007\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\001\002\000" +
    "\036\007\uffc2\011\uffc2\012\uffc2\013\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\001\002\000\036\007\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\021\uffc6\022\uffc6\023\113\024\114\025\112\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\001\002\000\036" +
    "\007\uffba\011\uffba\012\uffba\013\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\001\002\000\036\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\001\002\000\014\043" +
    "\026\045\024\046\030\047\027\050\023\001\002\000\030" +
    "\007\uffc9\011\uffc9\012\uffc9\013\uffc9\021\110\022\107\026" +
    "\uffc9\027\uffc9\030\105\031\106\032\uffc9\001\002\000\036" +
    "\007\uffbb\011\uffbb\012\uffbb\013\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\001\002\000\036\007\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\001\002\000\042\007" +
    "\uffb6\010\060\011\uffb6\012\uffb6\013\uffb6\016\061\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\001\002\000\030\006\063\020\100" +
    "\022\072\033\065\034\073\035\102\036\076\037\070\040" +
    "\077\041\103\042\071\001\002\000\030\006\063\020\100" +
    "\022\072\033\065\034\073\035\102\036\076\037\070\040" +
    "\077\041\103\042\071\001\002\000\030\006\063\020\100" +
    "\022\072\033\065\034\073\035\102\036\076\037\070\040" +
    "\077\041\103\042\071\001\002\000\030\006\063\020\100" +
    "\022\072\033\065\034\073\035\102\036\076\037\070\040" +
    "\077\041\103\042\071\001\002\000\036\007\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\021\uffc8\022\uffc8\023\113\024\114\025" +
    "\112\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\001\002" +
    "\000\030\006\063\020\100\022\072\033\065\034\073\035" +
    "\102\036\076\037\070\040\077\041\103\042\071\001\002" +
    "\000\030\006\063\020\100\022\072\033\065\034\073\035" +
    "\102\036\076\037\070\040\077\041\103\042\071\001\002" +
    "\000\030\006\063\020\100\022\072\033\065\034\073\035" +
    "\102\036\076\037\070\040\077\041\103\042\071\001\002" +
    "\000\036\007\uffc4\011\uffc4\012\uffc4\013\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\001\002\000\036\007\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\001\002\000" +
    "\036\007\uffc3\011\uffc3\012\uffc3\013\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\001\002\000\036\007\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\021\uffc7\022\uffc7\023\113\024\114\025\112\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\001\002\000\024" +
    "\007\uffcd\011\uffcd\012\uffcd\013\uffcd\021\110\022\107\026" +
    "\uffcd\027\uffcd\032\uffcd\001\002\000\024\007\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\021\110\022\107\026\uffcc\027\uffcc\032" +
    "\uffcc\001\002\000\040\007\uffb3\010\125\011\uffb3\012\uffb3" +
    "\013\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\001\002\000\036" +
    "\007\uffb5\011\uffb5\012\uffb5\013\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\001\002\000\032\006\063\011\033\020\100\022" +
    "\072\033\065\034\073\035\102\036\076\037\070\040\077" +
    "\041\103\042\071\001\002\000\006\011\130\032\127\001" +
    "\002\000\030\006\063\020\100\022\072\033\065\034\073" +
    "\035\102\036\076\037\070\040\077\041\103\042\071\001" +
    "\002\000\036\007\uffb4\011\uffb4\012\uffb4\013\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\001\002\000\014\007\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\032\uffcf\001\002\000\036\007\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\001" +
    "\002\000\030\006\063\020\100\022\072\033\065\034\073" +
    "\035\102\036\076\037\070\040\077\041\103\042\071\001" +
    "\002\000\012\007\uffd2\012\uffd2\013\uffd2\032\127\001\002" +
    "\000\006\007\137\012\136\001\002\000\030\006\063\020" +
    "\100\022\072\033\065\034\073\035\102\036\076\037\070" +
    "\040\077\041\103\042\071\001\002\000\004\010\140\001" +
    "\002\000\030\006\063\020\100\022\072\033\065\034\073" +
    "\035\102\036\076\037\070\040\077\041\103\042\071\001" +
    "\002\000\006\011\142\032\127\001\002\000\036\007\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\001\002\000\012\007\uffd3\012\uffd3\013\uffd3\032\127\001" +
    "\002\000\044\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\001\002" +
    "\000\030\006\063\020\100\022\072\033\065\034\073\035" +
    "\102\036\076\037\070\040\077\041\103\042\071\001\002" +
    "\000\030\006\063\020\100\022\072\033\065\034\073\035" +
    "\102\036\076\037\070\040\077\041\103\042\071\001\002" +
    "\000\024\007\uffca\011\uffca\012\uffca\013\uffca\021\110\022" +
    "\107\026\uffca\027\uffca\032\uffca\001\002\000\024\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\021\110\022\107\026\uffcb\027" +
    "\uffcb\032\uffcb\001\002\000\036\007\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\001\002\000\006" +
    "\007\153\032\127\001\002\000\036\007\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\001\002\000" +
    "\006\013\155\032\127\001\002\000\022\005\uffe0\042\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\001" +
    "\002\000\030\006\063\020\100\022\072\033\065\034\073" +
    "\035\102\036\076\037\070\040\077\041\103\042\161\001" +
    "\002\000\004\007\164\001\002\000\006\007\uffd0\032\127" +
    "\001\002\000\040\006\133\007\uffda\010\uffda\014\162\016" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\001\002\000\030\006" +
    "\063\020\100\022\072\033\065\034\073\035\102\036\076" +
    "\037\070\040\077\041\103\042\071\001\002\000\006\007" +
    "\uffd1\032\127\001\002\000\020\004\043\042\051\051\050" +
    "\053\054\054\046\055\053\056\052\001\002\000\022\005" +
    "\uffe9\042\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\022\005\uffea\042\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001\002\000\022" +
    "\005\uffe4\042\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\001\002\000\006\012\136\013\171\001\002" +
    "\000\022\005\uffe1\042\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\001\002\000\006\013\173\032\127" +
    "\001\002\000\022\005\uffe2\042\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\030\006\063" +
    "\020\100\022\072\033\065\034\073\035\102\036\076\037" +
    "\070\040\077\041\103\042\071\001\002\000\006\007\176" +
    "\012\136\001\002\000\006\013\uffdd\030\177\001\002\000" +
    "\004\042\202\001\002\000\004\013\201\001\002\000\022" +
    "\005\uffdf\042\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\001\002\000\014\010\uffda\012\uffda\013\uffda" +
    "\016\uffda\031\uffda\001\002\000\012\010\060\012\uffdb\016" +
    "\061\031\uffdb\001\002\000\006\012\205\031\206\001\002" +
    "\000\004\042\202\001\002\000\004\013\uffde\001\002\000" +
    "\012\010\060\012\uffdc\016\061\031\uffdc\001\002\000\030" +
    "\006\063\020\100\022\072\033\065\034\073\035\102\036" +
    "\076\037\070\040\077\041\103\042\071\001\002\000\006" +
    "\007\212\032\127\001\002\000\020\004\043\042\051\051" +
    "\050\053\054\054\046\055\053\056\052\001\002\000\022" +
    "\005\uffe6\042\uffe6\051\uffe6\052\214\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\001\002\000\020\004\043\042\051\051\050" +
    "\053\054\054\046\055\053\056\052\001\002\000\022\005" +
    "\uffe5\042\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\001\002\000\010\010\060\013\217\016\061\001" +
    "\002\000\022\005\uffe3\042\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\001\002\000\014\043\026\045" +
    "\024\046\030\047\027\050\023\001\002\000\010\007\uffd4" +
    "\010\032\012\uffd4\001\002\000\004\004\223\001\002\000" +
    "\006\005\ufff6\042\ufff6\001\002\000\006\005\227\042\225" +
    "\001\002\000\004\015\230\001\002\000\006\005\ufff7\042" +
    "\ufff7\001\002\000\010\002\ufffb\042\ufffb\044\ufffb\001\002" +
    "\000\014\043\026\045\024\046\030\047\027\050\023\001" +
    "\002\000\006\010\032\013\232\001\002\000\006\005\ufff5" +
    "\042\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\004\004\003\001\001\000\006\003" +
    "\010\006\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\015" +
    "\020\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\024\012\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\034\001\001\000\004\013\043" +
    "\001\001\000\010\011\036\012\030\022\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\041\012\030" +
    "\001\001\000\002\001\001\000\004\015\044\001\001\000" +
    "\002\001\001\000\006\016\046\023\055\001\001\000\004" +
    "\023\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\103\030\171\032\065\033\100" +
    "\034\074\035\073\036\063\001\001\000\022\023\103\026" +
    "\167\030\133\032\065\033\100\034\074\035\073\036\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\103\030\153\032\065\033\100\034\074" +
    "\035\073\036\063\001\001\000\020\023\103\030\066\032" +
    "\065\033\100\034\074\035\073\036\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\103\030\151\032" +
    "\065\033\100\034\074\035\073\036\063\001\001\000\002" +
    "\001\001\000\010\023\103\035\150\036\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\103\035\131\036\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\122\012\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\103\033\121\034\074\035" +
    "\073\036\063\001\001\000\014\023\103\033\120\034\074" +
    "\035\073\036\063\001\001\000\012\023\103\034\117\035" +
    "\073\036\063\001\001\000\012\023\103\034\110\035\073" +
    "\036\063\001\001\000\002\001\001\000\010\023\103\035" +
    "\116\036\063\001\001\000\010\023\103\035\115\036\063" +
    "\001\001\000\010\023\103\035\114\036\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\123\001\001\000\002\001\001\000\020\023\103\030\125" +
    "\032\065\033\100\034\074\035\073\036\063\001\001\000" +
    "\002\001\001\000\020\023\103\030\130\032\065\033\100" +
    "\034\074\035\073\036\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\023\103\026\134" +
    "\030\133\032\065\033\100\034\074\035\073\036\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\023\103" +
    "\030\142\032\065\033\100\034\074\035\073\036\063\001" +
    "\001\000\002\001\001\000\020\023\103\030\140\032\065" +
    "\033\100\034\074\035\073\036\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\103\033\147\034\074\035\073\036\063\001" +
    "\001\000\014\023\103\033\146\034\074\035\073\036\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\103\027\156\030\157\032" +
    "\065\033\100\034\074\035\073\036\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
    "\103\030\162\032\065\033\100\034\074\035\073\036\063" +
    "\001\001\000\002\001\001\000\012\013\165\014\166\016" +
    "\164\023\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\023\103\026\174" +
    "\030\133\032\065\033\100\034\074\035\073\036\063\001" +
    "\001\000\002\001\001\000\004\025\177\001\001\000\006" +
    "\023\202\024\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\103\030\210\032\065\033\100\034\074" +
    "\035\073\036\063\001\001\000\002\001\001\000\012\013" +
    "\165\014\212\016\164\023\055\001\001\000\002\001\001" +
    "\000\012\013\165\014\214\016\164\023\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\220\012\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\223\001\001\000\004\007\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\230\012\030\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.nextToken(); 
    }


    // Connect this parser to a scanner!
    LangLexer s;
    public LangParser(LangLexer s){ this.s=s; }
    // Get the line
    // Connect this parser to a scanner!
    boolean error = false;

    private String symToStr(Symbol s){
            return LangParserSym.terminalNames[s.sym];
    }
    private String symToStr(Integer i){
            return LangParserSym.terminalNames[i];
    } 

    public void report_error(String message, Object info){
          Symbol s = (Symbol) info;
          System.err.println(message + " at input " + cur_token.left + ", " + cur_token.right + ": near " + symToStr(s));
          System.err.print("Expected symbols: ");
          int counter = 10;
          for(Integer i : expected_token_ids()){
              if(counter <= 0){
                 System.err.println(symToStr(i) + " " );
                 counter = 11;
              }else{
                 System.err.print(symToStr(i) + " ");
              }
              counter --;
          }
          System.err.println(" ");
          System.err.flush();
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
          done_parsing();
          // report_error(message, info);
          throw new Exception("Can't recover from previous error(s)");
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
          report_fatal_error("Couldn't repair and continue parse", cur_token);
    }

    public void syntax_error(Symbol cur_token){
           error = true;
           report_error("Syntax error ", cur_token );

    }

    boolean hasError(){ return error; }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LangParser$actions {
  private final LangParser parser;

  /** Constructor */
  CUP$LangParser$actions(LangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action_part00000000(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LangParser$result;

      /* select the action based on the action number */
      switch (CUP$LangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= dataList funcList 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Data> d = (ArrayList<Data>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		ArrayList<FunDef> f = (ArrayList<FunDef>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Program(dleft,dright,d,f); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		RESULT = start_val;
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LangParser$parser.done_parsing();
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dataList ::= dataList data 
            {
              ArrayList<Data> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Data> dl = (ArrayList<Data>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Data d = (Data)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("dataList",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dataList ::= 
            {
              ArrayList<Data> RESULT =null;
		 RESULT = new ArrayList<Data>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("dataList",2, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcList ::= funcList func 
            {
              ArrayList<FunDef> RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<FunDef> fl = (ArrayList<FunDef>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		FunDef f = (FunDef)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 fl.add(f); RESULT = fl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("funcList",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcList ::= 
            {
              ArrayList<FunDef> RESULT =null;
		 RESULT = new ArrayList<FunDef>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("funcList",4, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // data ::= DATA TYID LBRACE declList RBRACE 
            {
              Data RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int delleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int delright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Decl> del = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Data(dtleft,dtright,ty,del); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("data",1, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func ::= ID OPEN_PARENTHESIS paramList CLOSE_PARENTHESIS optRet block 
            {
              FunDef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		ArrayList<Param> params = (ArrayList<Param>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<LType> tl = (ArrayList<LType>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FunDef(ileft, iright, i, params, tl, b); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optRet ::= COLON tList 
            {
              ArrayList<LType> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		ArrayList<LType> tl = (ArrayList<LType>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = tl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("optRet",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optRet ::= 
            {
              ArrayList<LType> RESULT =null;
		 RESULT = new ArrayList<LType>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("optRet",15, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declList ::= declList decl 
            {
              ArrayList<Decl> RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Decl> dl = (ArrayList<Decl>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 dl.add(d); RESULT = dl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("declList",6, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declList ::= 
            {
              ArrayList<Decl> RESULT =null;
		 RESULT = new ArrayList<Decl>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("declList",6, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= ID DOUBLE_COLON type SEMICOLON 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		LType ty = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Decl(ileft,iright,i,ty); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("decl",5, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tList ::= tList COMMA type 
            {
              ArrayList<LType> RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		ArrayList<LType> tl = (ArrayList<LType>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 tl.add(t); RESULT = tl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("tList",16, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tList ::= type 
            {
              ArrayList<LType> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ArrayList<LType> l = new ArrayList<LType>(); l.add(t); RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("tList",16, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= type LBRACKET RBRACKET 
            {
              LType RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LType ty = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		 RESULT = new TyArray(tyleft,tyright,ty); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= btype 
            {
              LType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType b = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = b; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("type",7, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // btype ::= TYINT 
            {
              LType RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyInt(itleft, itright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // btype ::= TYCHAR 
            {
              LType RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyChar(ctleft, ctright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // btype ::= TYBOOL 
            {
              LType RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object bt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyBool(btleft, btright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // btype ::= TYFLOAT 
            {
              LType RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyFloat(ftleft, ftright); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // btype ::= TYID 
            {
              LType RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new TyId(tyleft, tyright, ty); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("btype",8, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // block ::= LBRACE cmdList RBRACE 
            {
              Block RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Cmd> cl = (ArrayList<Cmd>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Block(clleft,clright,cl); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtBlock ::= block 
            {
              StmtBlock RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Block bk = (Block)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new StmtBlock(bkleft,bkright,bk); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtBlock ::= cmd 
            {
              StmtBlock RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new StmtBlock(cleft,cright,c); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("stmtBlock",10, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cmdList ::= cmdList cmd 
            {
              ArrayList<Cmd> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Cmd> cl = (ArrayList<Cmd>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Cmd c = (Cmd)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",11, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmdList ::= 
            {
              ArrayList<Cmd> RESULT =null;
		 RESULT = new ArrayList<Cmd>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmdList",11, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmd ::= IF OPEN_PARENTHESIS exp CLOSE_PARENTHESIS stmtBlock 
            {
              Cmd RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock sb = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new If(ileft,iright, e, sb, null); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmd ::= IF OPEN_PARENTHESIS exp CLOSE_PARENTHESIS stmtBlock ELSE stmtBlock 
            {
              Cmd RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int sbtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int sbtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		StmtBlock sbt = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sbfleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sbfright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock sbf = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new If(ileft,iright, e, sbt, sbf); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cmd ::= ITERATE OPEN_PARENTHESIS loopCond CLOSE_PARENTHESIS stmtBlock 
            {
              Cmd RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		Object it = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LoopCond lc = (LoopCond)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		StmtBlock stmt = (StmtBlock)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Iterate(itleft,itright, lc, stmt); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cmd ::= READ lvalue SEMICOLON 
            {
              Cmd RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Read(rleft,rright, lv); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmd ::= PRINT exp SEMICOLON 
            {
              Cmd RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Print(pleft,pright, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmd ::= RETURN expList SEMICOLON 
            {
              Cmd RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Return(rleft, rright, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmd ::= lvalue ATBR exp SEMICOLON 
            {
              Cmd RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new Assign(lvleft,lvright,lv,e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmd ::= ID OPEN_PARENTHESIS expList CLOSE_PARENTHESIS optFRets SEMICOLON 
            {
              Cmd RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<LValue> ll = (ArrayList<LValue>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new FunCall(ileft, iright, i, el, ll); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("cmd",12, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-5)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // optFRets ::= LT lvalueList GT 
            {
              ArrayList<LValue> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		ArrayList<LValue> ll = (ArrayList<LValue>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = ll; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("optFRets",19, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // optFRets ::= 
            {
              ArrayList<LValue> RESULT =null;
		 RESULT = new ArrayList<LValue>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("optFRets",19, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lvalueList ::= lvalueList COMMA lvalue 
            {
              ArrayList<LValue> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		ArrayList<LValue> ll = (ArrayList<LValue>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ll.add(lv); RESULT = ll; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalueList",18, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lvalueList ::= lvalue 
            {
              ArrayList<LValue> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ArrayList<LValue> l = new ArrayList<>(); l.add(lv); RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalueList",18, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lvalue ::= ID 
            {
              LValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new LValue(idleft, idright, id); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalue",17, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lvalue ::= lvalue LBRACKET exp RBRACKET 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new ArrayAccess(lvleft, lvright, lv, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalue",17, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-3)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalue ::= lvalue DOT ID 
            {
              LValue RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FieldAccess(lvleft, lvright, lv, id); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("lvalue",17, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramList ::= pList 
            {
              ArrayList<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		ArrayList<Param> pl = (ArrayList<Param>)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramList ::= 
            {
              ArrayList<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("paramList",13, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pList ::= pList COMMA ID DOUBLE_COLON type 
            {
              ArrayList<Param> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		ArrayList<Param> pl = (ArrayList<Param>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 pl.add(new Param(ileft, iright, i, t)); RESULT = pl; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pList",14, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // pList ::= ID DOUBLE_COLON type 
            {
              ArrayList<Param> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ArrayList<Param> p = new ArrayList<>(); 
                                         p.add(new Param(ileft, iright, i, t)); 
                                         RESULT = p; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pList",14, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expList ::= expList COMMA exp 
            {
              ArrayList<Exp> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expList",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expList ::= exp 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 ArrayList<Exp> l = new ArrayList<>(); l.add(e); RESULT = l; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("expList",20, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // loopCond ::= ID COLON exp 
            {
              LoopCond RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new LoopCond(i, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("loopCond",21, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // loopCond ::= exp 
            {
              LoopCond RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new LoopCond( null,e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("loopCond",21, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int anleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int anright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object an = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new And (anleft,anright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= rexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = r; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rexp ::= aexp GT aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Greater(gtleft,gtright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rexp ::= aexp LT aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Less(ltleft,ltright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rexp ::= rexp EQ aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Equal(eqleft,eqright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rexp ::= rexp NEQ aexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int neqleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Different(neqleft,neqright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rexp ::= aexp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = a; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("rexp",24, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aexp ::= aexp PLUS mexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Plus(pleft,pright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("aexp",25, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aexp ::= aexp SUB mexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Sub(uleft,uright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("aexp",25, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aexp ::= mexp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp m = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = m; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("aexp",25, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mexp ::= mexp MULT sexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Times(sleft,sright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",26, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mexp ::= mexp DIV sexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Div(dleft,dright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",26, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mexp ::= mexp MOD sexp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Mod(mleft,mright,e1,e2); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",26, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mexp ::= sexp 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = s; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("mexp",26, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sexp ::= NOT sexp 
            {
              Exp RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Not(noleft,noright,e1); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sexp ::= SUB sexp 
            {
              Exp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new UnaryMinus(uleft,uright,e1); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sexp ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Bool(tleft,tright,true); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sexp ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Bool(fleft,fright,false); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sexp ::= NULL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Null(nleft,nright,null); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sexp ::= INT_LITERAL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Int(nleft,nright,n); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sexp ::= FLOAT_LITERAL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new FloatLit(nleft,nright,n); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sexp ::= CHAR_LITERAL 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Char(cleft,cright,c); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sexp ::= pexp 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = p; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("sexp",27, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pexp ::= OPEN_PARENTHESIS exp CLOSE_PARENTHESIS 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pexp",28, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pexp ::= ID OPEN_PARENTHESIS expList CLOSE_PARENTHESIS LBRACKET exp RBRACKET 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = new FCall(ileft, iright, i, el, e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pexp",28, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-6)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pexp ::= lvalue 
            {
              Exp RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		LValue lv = (LValue)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = lv; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pexp",28, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // pexp ::= NEW type optExp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		LType t = (LType)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.peek()).value;
		 RESULT = new Instanciate(tleft,tright,t,e); 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("pexp",28, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // optExp ::= LBRACKET exp RBRACKET 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$LangParser$stack.elementAt(CUP$LangParser$top-1)).value;
		 RESULT = e; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("optExp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.elementAt(CUP$LangParser$top-2)), ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // optExp ::= 
            {
              Exp RESULT =null;
		 RESULT = null; 
              CUP$LangParser$result = parser.getSymbolFactory().newSymbol("optExp",23, ((java_cup.runtime.Symbol)CUP$LangParser$stack.peek()), RESULT);
            }
          return CUP$LangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LangParser$do_action(
    int                        CUP$LangParser$act_num,
    java_cup.runtime.lr_parser CUP$LangParser$parser,
    java.util.Stack            CUP$LangParser$stack,
    int                        CUP$LangParser$top)
    throws java.lang.Exception
    {
              return CUP$LangParser$do_action_part00000000(
                               CUP$LangParser$act_num,
                               CUP$LangParser$parser,
                               CUP$LangParser$stack,
                               CUP$LangParser$top);
    }
}

}
